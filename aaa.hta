<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	<meta http-equiv="Content-Script-Type" content="text/javascript" />
	<meta http-equiv="Content-Style-Type" content="text/css" />
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>コピペ補助</title>

<style>
	* {
		box-sizing: border-box;
		padding: 0;
		margin: 0;
	}
	body {
		width: 100vw;
		height: 100vh;
		background: url(./annie-spratt-xz485Eku8O4-unsplash.jpg);
	}

	.menubar {
		width: calc(100vw);
		height: 80px;

		border: 1px solid lime;
	}
	.addItem,
	.delItem {
		display: inline-block;
		width: 50px;
		height:50px;
	}

/* 順序入れ替え動作用 flexbox定義 */
	.row {
		display: flex;
		overflow: auto;
		width: calc(100vw);
		height: calc(100vh - 80px);
		flex-direction: column;
		flex-wrap: wrap;
		justify-content: flex-start;
		
		border: 1px solid red;
	}
	.row .item {
		display: flex;
		max-width: 400px;
		height: 150px;
		flex-direction: row;
		flex-wrap: nowrap;
		justify-content: flex-start;
		align-items: center;
		border-radius: 20px;
		box-shadow: 0px 8px 60px -10px rgba(13, 28, 39, 0.6);

		transition-property: height;
		transition-duration: 1s;
		transition-timing-function: ease;
		
		margin: 10px 20px;
		padding: 8px;
		overflow: auto;

	}
	.bgColor1 {
		background: -ms-radial-gradient(closest-corner, rgba(16, 47, 70, 0) 60%, rgba(16, 47, 70, 0.2)), -ms-linear-gradient(108deg, #e5e9bf 45%, #00396f 90%);
	}
	.bgColor2 {
		background: -ms-radial-gradient(closest-corner, rgba(16, 47, 70, 0) 60%, rgba(16, 47, 70, 0.2)), -ms-linear-gradient(108deg, #e0da81, #e0a681 45%, #0f1b58 90%);
	}
	.bgColor3 {
		background: radial-gradient(circle farthest-side at right bottom, #f8cdda, #1d2b64 95%, #0e153a);
	}
	.bgColor4 {
		background: -ms-radial-gradient(closest-corner, rgba(16, 47, 70, 0) 60%, rgba(16, 47, 70, 0.26)), -ms-linear-gradient(108deg, #26d0ce, #1a2980 90%);
	}


	.handle {
		display: inline-block;
		width: 10%;
		height: calc(100% - 10px);
		border-radius: 20px;
		margin: 5px;
		cursor: move;
		background: linear-gradient(90deg, rgba(127,127,127,0.6) 3px, transparent 1px), 
					linear-gradient(rgba(127,127,127,0.6) 3px, transparent 1px),
					rgba(255,255,255,0.6);
		background-size: 5px 5px;

		border: 1px solid black;
	}

	.textbox {
		display: inline-block;
		width: 60%;
		height: calc(100% - 10px);
		margin: 5px;
		padding 5px;
		resize: none;
/*		border: 1px solid black;	*/
		border-radius: 6px;
		overflow: auto;
		background-color: rgba(255,255,255,0.7);
		box-shadow: 4px 4px 45px -7px rgba(13, 28, 39, 0.5) inset;

		font-size: 18px;
		font-family: "Yu Mincho", serif;
		line-height: 1.2em;

	}

	/* Button定義 */
	.pushable {
		position: relative;
		width: 30%;
		height: 80%;
		border: none;
		background: transparent;
		padding: 20px;
		margin: 5px;
		cursor: pointer;
		outline-offset: 4px;
		transition: filter 250ms;
/*		border: 1px solid red;	*/
	}
	.shadow {
		position: absolute;
		top: 8px;
		left: 0;
		width: 100%;
		height: calc(100% - 16px);
		border-radius: 12px;
		background: rgba(0,0,0,0.25);
		will-change: transform;
		transform: translateY(2px);
		transition: transform 600ms cubic-bezier(.3, .7, .4, 1);
	}
	.edge {
		position: absolute;
		top: 8px;
		left: 0;
		width: 100%;
		height: calc(100% - 16px);
		border-radius: 12px;
		background-color: #0D393B;
	}
	.front {
		display: inline-block;
		position: absolute;
		top: 8px;
		left: 0;
		width: 100%;
		height: calc(100% - 16px);
		padding-top: 10px;
		border-radius: 12px;
		font-size: 1.25rem;
		color: white;
		font-family: "Chiller", Fantasy;
		background-color: #104547;
		will-change: transform;
		transform: translateY(-4px);
		transition: transform 600ms cubic-bezier(.3, .7, .4, 1);
		-ms-user-select: none;
	}
	.pushable:hover {
		filter: brightness(110%);
	}
	.pushable:hover .front {
		transform: translateY(-6px);
		transition: transform 250ms cubic-bezier(.3, .7, .4, 1.5);
	}
	.pushable:active .front {
		transform: translateY(-2px);
		transition: transform 34ms;
	}
	.pushable:hover .shadow {
		transform: translateY(4px);
		transition: transform 250ms cubic-bezier(.3, .7, .4, 1.5);
	}
	.pushable:active .shadow {
		transform: translateY(1px);
		transition: transform 34ms;
	}
	.pushable:focus:not(:focus-visible) {
		outline: none;
	}


/*
	.btnCopy {
		display: inline-block;
		width: 30%;
		text-align: center;
		position: relative;
		text-decoration: none;
		color: #fff;
		background-color: #104547;
		font-family: "Chiller", Fantasy;
		font-size: 35px;
		padding: 0;
		border-radius: 6px;
		overflow: hidden;
		transition: all 0.2s linear 0s;
		margin: 5px;

		border: 1px solid red;

	}
	.btnCopy:before {
		content: "☞";
		font-size: 50px;
		display: flex;
		align-items: center;
		justify-content: center;
		position: absolute;
		left: 0;	top: 0;
		right: 0;	bottom: 0;
		transform: translatex(-100%);
		background-color: rgba(255, 255, 255, 0.3);
		//  border-radius: 0px 6px 6px 0px;
		text-align: center;
	}
	.btnCopy:hover {
	}
	.btnCopy:hover:before {
		animation:
			buketaniopt 0.25s ease-in   0s 1,
			buketani8  0.25s ease-out 0.25s 2 alternate,
			buketani7  0.15s ease-out 0.75s 2 alternate,
			buketani6  0.15s ease-out 1.05s 2 alternate,
			buketani5  0.15s ease-out 1.35s 2 alternate,
			buketani4  0.15s ease-out 1.65s 2 alternate,
			buketani3  0.15s ease-out 1.95s 2 alternate,
			buketani2 0.15s ease-out 2.25s 2 alternate,
			buketani1 0.15s ease-out 2.55s 2 alternate;
	}
	@keyframes buketaniopt {0%{transform:translateX(-100%);}	100%{transform: translateX(0%);}}
	@keyframes buketani8   {0%{transform:translateX(0%);}	100%{transform: translateX(-30%);}}
	@keyframes buketani7   {0%{transform:translateX(0%);}	100%{transform: translateX( -10%);}}
	@keyframes buketani6   {0%{transform:translateX(0%);}	100%{transform: translateX( -4%);}}
	@keyframes buketani5   {0%{transform:translateX(0%);}	100%{transform: translateX( 0%);}}
	@keyframes buketani4   {0%{transform:translateX(0%);}	100%{transform: translateX(  0%);}}
	@keyframes buketani3   {0%{transform:translateX(0%);}	100%{transform: translateX(  0%);}}
	@keyframes buketani2   {0%{transform:translateX(0%);}	100%{transform: translateX(  0%);}}
	@keyframes buketani1   {0%{transform:translateX(0%);}	100%{transform: translateX(  0%);}}
*/
</style>
</head>

<body>
	<div class="menubar">
		<button class="addItem" onclick="addItem()">➕</button>
		<button class="delItem" onclick="deleteLastItem()">➖</button>
	</div>
	<div id="itemBody" class="row">
	</div>

<script>
'use strict';

const STARTUP_ITEMS = 4;	/* 起動時のITEM数 */





// 🅳🆁🅰🅶 🅰🅽🅳 🅳🆁🅾🅿
// HTML5 の機能を使っているが、要素の入れ替えはflexboxのorder property頼り。
// Dropイベントで order番号を振り直している。

let draggingEle = null;	/* Drag中の要素を保持。Drag中以外はnull */
let draggingEleHeight = 0;

function findAll(selector) {
	const nodeList = document.querySelectorAll(selector);
	const nodes = Array.prototype.slice.call(nodeList);
	return nodes;
}

function onDragStart(event) {
	event.dataTransfer.effectAllowed = 'all';
//	event.dataTransfer.setData('Text', this.id);
	
	draggingEle = event.target.parentElement;
	draggingEleHeight = draggingEle.style.height;
	draggingEle.style.height = "20px";
	console.log("onDragStart");
	return false;
}


function onDragEnter(event) {
	if (event.preventDefault) event.preventDefault();

	let dragEle = draggingEle;
	let dropEle = event.currentTarget;

	let sourceOrder = parseInt(dragEle.style.order);
	let targetOrder = parseInt(dropEle.style.order);
	let shiftArray = (targetOrder < sourceOrder)? 1: -1;	// ずらす方向の決定
	findAll('.item').forEach(function (node) {
		// 順序入れ替えの影響範囲に絞る。影響範囲はDrag対象番号～Drop対象番号内。
		if(Math.min(targetOrder,sourceOrder) <= node.style.order && node.style.order <= Math.max(targetOrder,sourceOrder)) {
			if( node != dragEle )
				node.style.order = parseInt(node.style.order) + shiftArray;
		}
	});
	dragEle.style.order = targetOrder;
	
	return false;
}

function onDragOver(event) {
	if (event.preventDefault) event.preventDefault();
	this.classList.add('over');

	return false;
}

function onDragLeave(event) {
	if (event.preventDefault) event.preventDefault();
	this.classList.remove('over');

	return false;
}

function onDragEnd(event) {
	if( draggingEle ){
		draggingEle.style.height = draggingEleHeight;
		draggingEle = null;
	}

	return false;
}

function onDrop(event) {
	if (event.preventDefault) event.preventDefault();
	this.classList.remove('over');

	let dragEle = draggingEle;
	let dropEle = event.currentTarget;

	let sourceOrder = parseInt(dragEle.style.order);
	let targetOrder = parseInt(dropEle.style.order);
	let shiftArray = (targetOrder < sourceOrder)? 1: -1;	// ずらす方向の決定
	findAll('.item').forEach(function (node) {
		// 順序入れ替えの影響範囲に絞る。影響範囲はDrag対象番号～Drop対象番号内。
		if(Math.min(targetOrder,sourceOrder) <= node.style.order && node.style.order <= Math.max(targetOrder,sourceOrder)) {
			if( node != dragEle )
				node.style.order = parseInt(node.style.order) + shiftArray;
		}
	});
	dragEle.style.order = targetOrder;
//	dragEle.style.height = draggingEleHeight;	// onDragEndで対応

	// debug code
//	findAll('.item').forEach(function (node) {
//		node.querySelector('input').value = node.style.order;
//	});
	return false;
}


/*	コピペ用ワンセットとして、次の形式のHTML要素を作成・追加
	(表示順(order)は先頭に、DOM tree上は最後尾に追加)
	<div class="item">
		<span class="handle" draggable="true">ハンドル</span>
		<button class="pushable">
			<span class="shadow"></span>
			<span class="edge"></span>
			<span class="front">Push to Copy</span>
		</button>
		<div class="textbox" contenteditable="true"></div>
	</div>
*/
let countOrder = 0;
function addItem() {

	// 追加要素を先頭にするため、現存する全itemのorderを1加算
	findAll('.item').forEach(function (node) {
		node.style.order++;
	});

	// itemの作成・追加
	const eleItem = document.getElementById('itemBody').insertBefore( document.createElement('div') );
	eleItem.classList.add("item");
	eleItem.classList.add("bgColor" + (countOrder++ % 4 + 1));
	eleItem.style.order = 0;	// 追加要素は先頭表示

	const eleHandle = eleItem.appendChild( document.createElement('span') );
	eleHandle.classList.add("handle");
	eleHandle.setAttribute('draggable', 'true');
	eleHandle.textContent = "";
	// button作成
	const eleBtn = eleItem.appendChild( document.createElement('button') );
	eleBtn.classList.add("pushable");
		const eleBtnShadow = eleBtn.appendChild( document.createElement('span') );
		eleBtnShadow.classList.add("shadow");
		const eleBtnEdge = eleBtn.appendChild( document.createElement('span') );
		eleBtnEdge.classList.add("edge");
		const eleBtnFront = eleBtn.appendChild( document.createElement('span') );
		eleBtnFront.classList.add("front");
		eleBtnFront.textContent = "Push to Copy";
	// Textbox作成
	const eleTxt = eleItem.appendChild( document.createElement('div') );
	eleTxt.classList.add("textbox");
	eleTxt.setAttribute('contenteditable', 'true');

	eleHandle.addEventListener('dragstart',	onDragStart);		// Dragし初めに来る
	eleHandle.addEventListener('dragend',	onDragEnd);			// Dragを止めた(右クリックを離したり)ら来る

	eleItem.addEventListener('dragenter',	onDragEnter);		// Drop target 上に入った時に来る
	eleItem.addEventListener('dragover',	onDragOver);		// Drop target 上に居る間来る
	eleItem.addEventListener('dragleave',	onDragLeave);		// Drop target から離れたら来る
	eleItem.addEventListener('drop',		onDrop);			// Drop target に dropしたら来る
	eleItem.addEventListener('dragend',		onDragEnd);			// Dragを止めた(右クリックを離したり)ら来る

}

/* DOM Tree上の最後尾の1件を削除 */
function deleteLastItem() {
	let nodes = document.getElementById('itemBody').childNodes;
	if( 0 < nodes.length ) {
		let targetEle = nodes[nodes.length - 1];
		targetEle.parentNode.removeChild( targetEle );
		countOrder--;
	}
}


for( let cnt = 0; cnt < STARTUP_ITEMS; cnt++ )
	addItem();




</script>
</body>
</html>
