// *************************************************************************
// 英字フォント変換マクロ
// 選択範囲の英字を指定したフォントに変換
//
// ※注意1	「Double Struck capital」は大文字の "CHNPQRZ" を変換できない。
//			Wordやメモ帳に貼りつけると出るが……
// ※注意2	メニューを出したままでいると「マクロ実行中…」のDialogが表示される。
//			これはsakura editorのマクロ無限ループ対策によるもの。
//			[キャンセル]押下かメニュー選択で消去が可能。
//
//	2022/07/19	Ver.1.0.0
//	2022/07/29	Ver.1.0.1	Bold sans-serif追加
// *************************************************************************


try {
	// 1. 𝐁𝐨𝐥𝐝 𝐒𝐞𝐫𝐢𝐟
	var bSerif = {};
	bSerif.AZ  = [0xd835, 0xdbbf];
	bSerif.az  = [0xd835, 0xdbb9];
	bSerif.n09 = [0xd835, 0xdf9e];
	bSerif.SP  = null;
	// 2. 𝗕𝗼𝗹𝗱 𝗦𝗮𝗻𝘀-𝘀𝗲𝗿𝗶𝗳
	var bSansserif = {};
	bSansserif.AZ  = [0xd835, 0xddd4-0x41];
	bSansserif.az  = [0xd835, 0xddee-0x61];
	bSansserif.n09 = [0xd835, 0xdfec-0x30];
	bSansserif.SP  = null;
	// 3. 𝕭𝖔𝖑𝖉 𝕱𝖗𝖆𝖐𝖙𝖚𝖗
	var bFraktur = {};
	bFraktur.AZ  = [0xd835, 0xdd2b];
	bFraktur.az  = [0xd835, 0xdd25];
	bFraktur.n09 = null;	// 割り当て無し
	bFraktur.SP  = null;
	// 4. 𝔻𝕠𝕦𝕓𝕝𝕖 𝕊𝕥𝕣𝕦𝕔𝕜 𝕔𝕒𝕡𝕚𝕥𝕒𝕝	※注意：大文字の CHNPQRZ はサクラエディタでは表示できません
	var dStruckCapital = {};
	dStruckCapital.AZ  = [0xd835, 0xdcf7];
	dStruckCapital.az  = [0xd835, 0xdcf1];
	dStruckCapital.n09 = [0xd835, 0xdfa8];
	dStruckCapital.SP  = { C: 0x2102, H: 0x210D, N: 0x2115, P: 0x2119, Q: 0x211A, R: 0x211D, Z: 0x2124 };
	// 5. 𝓑𝓸𝓵𝓭 𝓢𝓬𝓻𝓲𝓹𝓽
	var bScript = {};
	bScript.AZ  = [0xd835, 0xdcd0-0x41];
	bScript.az  = [0xd835, 0xdcea-0x61];
	bScript.n09 = null;
	bScript.SP  = null;

	var dummy = null;
	var fontarr = new Array(dummy, bSerif, bSansserif, bFraktur, dStruckCapital, bScript);

	// Font選択メニュー
	var menustr = "𝐁𝐨𝐥𝐝 𝐒𝐞𝐫𝐢𝐟,𝗕𝗼𝗹𝗱 𝗦𝗮𝗻𝘀-𝘀𝗲𝗿𝗶𝗳,𝕭𝖔𝖑𝖉 𝕱𝖗𝖆𝖐𝖙𝖚𝖗,𝔻𝕠𝕦𝕓𝕝𝕖 𝕊𝕥𝕣𝕦𝕔𝕜 𝕔𝕒𝕡𝕚𝕥𝕒𝕝, 𝓑𝓸𝓵𝓭 𝓢𝓬𝓻𝓲𝓹𝓽";

	// 変換対象を選択済みかチェック
	var selectedStr = Editor.GetSelectedString(0);
	if( selectedStr < 1 ){
		var e = new Error(0, "変換したい文字を選択後に\r\nマクロを呼び出してください。");
		throw e;
	}

	var selectedType = null;
	// カーソル付近にメニューを表示し、変換先Fontを選択
	var disppos = 1;									// Menuの表示位置。0:mouse位置に表示, 1:cursor位置に表示
	var item = Editor.CreateMenu( disppos, menustr );	// 戻り値は1始まり。0はキャンセル
	selectedType = fontarr[item];						// Javascriptは領域外アクセスすると undefinedが返される。catchできない。

	// 変換実行
	if( selectedType != null ){
		var str = convToNewFont( selectedStr, selectedType );
		Editor.InsText( str );
	}
}// --- メイン処理終了 ---
catch( e ){
	Editor.InfoMsg( e.description );
}



// 変換関数
function convToNewFont( str, diff ){
	// 特殊変換文字
	var conv0 = str;
	if( diff.SP != null )
		conv0 = str.replace( /[A-Za-z]/g, function(c){
			if( c in diff.SP )	// 変数c内の文字が、連想配列のkeyとして存在するか
				return String.fromCharCode(diff.SP[c]);	// サロゲートペアではない
			else
				return c;
		});
	// 大文字変換
	var conv1 = conv0;
	if( diff.AZ != null )
		conv1 = conv0.replace( /[A-Z]/g, function(c){
			return String.fromCharCode(diff.AZ[0], c.charCodeAt(0) + diff.AZ[1]);
		});
	// 小文字変換
	var conv2 = conv1;
	if( diff.az != null )
		conv2 = conv1.replace( /[a-z]/g, function(c){
			return String.fromCharCode(diff.az[0], c.charCodeAt(0) + diff.az[1]);
		});
	// 数字変換
	var conv3 = conv2;
	if( diff.n09 != null )
		conv3 = conv2.replace( /[0-9]/g, function(c){
			return String.fromCharCode(diff.n09[0], c.charCodeAt(0) + diff.n09[1]);
		});
	return conv3;
}
